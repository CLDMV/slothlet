{
	"testConfig": {
		"description": "Comprehensive slothlet API test configuration",
		"baseConfig": {
			"dir": "./api_test",
			"debug": false
		},
		"directTests": [
			{
				"name": "direct hello test",
				"path": ["multi_func", "beta", "hello"],
				"args": [],
				"expected": "beta hello"
			}
		],
		"apiTests": [
			{
				"section": "rootFunction (default)",
				"description": "Root-level default function",
				"calls": [
					{
						"path": [],
						"args": ["World"],
						"expected": "Hello, World!",
						"label": "api(\"World\")"
					}
				]
			},
			{
				"section": "rootFunctionShout",
				"description": "Root-level named function - shout",
				"calls": [
					{
						"path": ["rootFunctionShout"],
						"args": ["World"],
						"expected": "HELLO, WORLD!",
						"label": "api.rootFunctionShout(\"World\")"
					}
				]
			},
			{
				"section": "rootFunctionWhisper",
				"description": "Root-level named function - whisper",
				"calls": [
					{
						"path": ["rootFunctionWhisper"],
						"args": ["World"],
						"expected": "hello, world.",
						"label": "api.rootFunctionWhisper(\"World\")"
					}
				]
			},
			{
				"section": "rootMath",
				"description": "Root-level math operations",
				"calls": [
					{
						"path": ["rootMath", "add"],
						"args": [2, 3],
						"expected": 5,
						"label": "api.rootMath.add(2, 3)"
					},
					{
						"path": ["rootMath", "multiply"],
						"args": [2, 3],
						"expected": 6,
						"label": "api.rootMath.multiply(2, 3)"
					}
				]
			},
			{
				"section": "rootstring",
				"description": "Root-level string operations",
				"calls": [
					{
						"path": ["rootstring", "upper"],
						"args": ["abc"],
						"expected": "ABC",
						"label": "api.rootstring.upper(\"abc\")"
					},
					{
						"path": ["rootstring", "reverse"],
						"args": ["abc"],
						"expected": "cba",
						"label": "api.rootstring.reverse(\"abc\")"
					}
				]
			},
			{
				"section": "string",
				"description": "String module operations",
				"calls": [
					{
						"path": ["string", "upper"],
						"args": ["abc"],
						"expected": "ABC",
						"label": "api.string.upper(\"abc\")"
					},
					{
						"path": ["string", "reverse"],
						"args": ["abc"],
						"expected": "cba",
						"label": "api.string.reverse(\"abc\")"
					}
				]
			},
			{
				"section": "math",
				"description": "Math module operations",
				"calls": [
					{
						"path": ["math", "add"],
						"args": [2, 3],
						"expected": 5,
						"label": "api.math.add(2, 3)"
					},
					{
						"path": ["math", "multiply"],
						"args": [2, 3],
						"expected": 6,
						"label": "api.math.multiply(2, 3)"
					}
				]
			},
			{
				"section": "multi_func",
				"description": "Multi-function module operations",
				"calls": [
					{
						"path": ["multi_func", "alpha"],
						"args": ["alpha"],
						"expected": "alpha: alpha",
						"label": "api.multi_func.alpha(\"alpha\")"
					},
					{
						"path": ["multi_func", "beta", "hello"],
						"args": [],
						"expected": "beta hello",
						"label": "api.multi_func.beta.hello()"
					},
					{
						"path": ["multi_func", "uniqueOne"],
						"args": ["uniqueOne"],
						"expected": "uniqueOne: uniqueOne",
						"label": "api.multi_func.uniqueOne(\"uniqueOne\")"
					},
					{
						"path": ["multi_func", "uniqueTwo"],
						"args": ["uniqueTwo"],
						"expected": "uniqueTwo: uniqueTwo",
						"label": "api.multi_func.uniqueTwo(\"uniqueTwo\")"
					},
					{
						"path": ["multi_func", "uniqueThree"],
						"args": ["uniqueThree"],
						"expected": "uniqueThree: uniqueThree",
						"label": "api.multi_func.uniqueThree(\"uniqueThree\")"
					},
					{
						"path": ["multi_func", "multi_func_hello"],
						"args": [],
						"expected": "beta hello",
						"label": "api.multi_func.multi_func_hello()"
					}
				]
			},
			{
				"section": "multi",
				"description": "Multi module operations",
				"calls": [
					{
						"path": ["multi", "alpha", "hello"],
						"args": [],
						"expected": "alpha hello",
						"label": "api.multi.alpha.hello()"
					},
					{
						"path": ["multi", "beta", "world"],
						"args": [],
						"expected": "beta world",
						"label": "api.multi.beta.world()"
					}
				]
			},
			{
				"section": "nested",
				"description": "Nested module operations",
				"calls": [
					{
						"path": ["nested", "date", "today"],
						"args": [],
						"expected": "2025-08-15",
						"label": "api.nested.date.today()"
					}
				]
			},
			{
				"section": "objectDefaultMethod",
				"description": "Object with default method",
				"calls": [
					{
						"path": ["objectDefaultMethod"],
						"args": ["Hello World"],
						"expected": "INFO: Hello World",
						"label": "api.objectDefaultMethod(\"Hello World\")"
					},
					{
						"path": ["objectDefaultMethod", "info"],
						"args": ["Test"],
						"expected": "INFO: Test",
						"label": "api.objectDefaultMethod.info(\"Test\")"
					},
					{
						"path": ["objectDefaultMethod", "warn"],
						"args": ["Test"],
						"expected": "WARN: Test",
						"label": "api.objectDefaultMethod.warn(\"Test\")"
					},
					{
						"path": ["objectDefaultMethod", "error"],
						"args": ["Test"],
						"expected": "ERROR: Test",
						"label": "api.objectDefaultMethod.error(\"Test\")"
					}
				]
			},
			{
				"section": "funcmod",
				"description": "Function module",
				"calls": [
					{
						"path": ["funcmod"],
						"args": [5, 6],
						"expected": "Hello, 5!",
						"label": "api.funcmod(5, 6)"
					}
				]
			},
			{
				"section": "util",
				"description": "Utility modules",
				"calls": [
					{
						"path": ["util", "size"],
						"args": [123],
						"expected": "size",
						"label": "api.util.size(123)"
					},
					{
						"path": ["util", "secondFunc"],
						"args": [123],
						"expected": "secondFunc",
						"label": "api.util.secondFunc(123)"
					},
					{
						"path": ["util", "url", "cleanEndpoint"],
						"args": ["sites_list", "default", {}, false, false],
						"expected": "cleanEndpoint",
						"label": "api.util.url.cleanEndpoint(...)"
					},
					{
						"path": ["util", "url", "buildUrlWithParams"],
						"args": ["10.0.0.1", { "foo": "bar" }],
						"expected": "buildUrlWithParams",
						"label": "api.util.url.buildUrlWithParams(...)"
					},
					{
						"path": ["util", "extract", "data"],
						"args": [],
						"expected": "data",
						"label": "api.util.extract.data()"
					},
					{
						"path": ["util", "extract", "section"],
						"args": [],
						"expected": "section",
						"label": "api.util.extract.section()"
					},
					{
						"path": ["util", "extract", "NVRSection"],
						"args": [],
						"expected": "NVRSection",
						"label": "api.util.extract.NVRSection()"
					},
					{
						"path": ["util", "extract", "parseDeviceName"],
						"args": [],
						"expected": "parseDeviceName",
						"label": "api.util.extract.parseDeviceName()"
					}
				]
			},
			{
				"section": "util.controller",
				"description": "Async utility controller operations",
				"calls": [
					{
						"path": ["util", "controller", "getDefault"],
						"args": [],
						"expected": "getDefault",
						"label": "api.util.controller.getDefault()",
						"async": true
					},
					{
						"path": ["util", "controller", "detectEndpointType"],
						"args": [],
						"expected": "detectEndpointType",
						"label": "api.util.controller.detectEndpointType()",
						"async": true
					},
					{
						"path": ["util", "controller", "detectDeviceType"],
						"args": [],
						"expected": "detectDeviceType",
						"label": "api.util.controller.detectDeviceType()",
						"async": true
					}
				]
			},
			{
				"section": "advanced",
				"description": "Advanced module operations",
				"calls": [
					// vitest breaks on this due to the way they wrap calls. But it works fine in the debug script (npm run debug).
					// {
					// 	"path": ["advanced", "selfObject", "addViaSelf"],
					// 	"args": [2, 3],
					// 	"expected": 5,
					// 	"label": "api.advanced.selfObject.addViaSelf(2, 3)"
					// },
					// vitest breaks on this due to the way they wrap calls. But it works fine in the debug script (npm run debug).
					// {
					// 	"path": ["advanced", "nest3"],
					// 	"args": ["slothlet"],
					// 	"expected": "Hello, slothlet!",
					// 	"label": "api.advanced.nest3(\"slothlet\")"
					// },
					{
						"path": ["advanced", "nest", "alpha"],
						"args": ["slothlet"],
						"expected": "alpha: slothlet",
						"label": "api.advanced.nest.alpha(\"slothlet\")"
					},
					{
						"path": ["advanced", "nest2", "alpha", "hello"],
						"args": [],
						"expected": "alpha hello",
						"label": "api.advanced.nest2.alpha.hello()"
					},
					{
						"path": ["advanced", "nest2", "beta", "world"],
						"args": [],
						"expected": "beta world",
						"label": "api.advanced.nest2.beta.world()"
					}
				]
			},
			{
				"section": "exportDefault",
				"description": "Export default operations",
				"calls": [
					{
						"path": ["exportDefault"],
						"args": [],
						"expected": "exportDefault default",
						"label": "api.exportDefault()"
					},
					{
						"path": ["exportDefault", "extra"],
						"args": [],
						"expected": "extra method overridden",
						"label": "api.exportDefault.extra()"
					}
				]
			}
		]
	}
}
